# demo/app_streamlit.py
# --- –¥–µ–ª–∞–µ—Ç –∏–º–ø–æ—Ä—Ç –∏–∑ src —Å—Ç–∞–±–∏–ª—å–Ω—ã–º –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ---
import sys, os
from pathlib import Path
from typing import Iterable, Tuple, Optional

CURR_DIR = Path(__file__).resolve().parent  # .../demo
PROJECT_ROOT = CURR_DIR.parent  # –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
if str(PROJECT_ROOT) not in sys.path:
    sys.path.append(str(PROJECT_ROOT))

# --- —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã ---
import json
from io import BytesIO
from PIL import Image
import streamlit as st

# --- –Ω–∞—à –ø–∞–π–ø–ª–∞–π–Ω ---
from src.pipeline import run_pipeline


# ============= –°–¢–ò–õ–ò–ó–ê–¶–ò–Ø =============
def load_css():
    st.markdown("""
    <style>
    /* –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ */
    :root {
        --primary-color: #6ee7ff;
        --secondary-color: #8b5cf6;
        --bg-dark: #0b1020;
        --bg-light: #0f1630;
        --text-color: #e9ecf1;
        --muted-color: #a9b3c7;
        --success-color: #34d399;
        --warning-color: #f59e0b;
        --danger-color: #ef4444;
    }

    /* –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ–Ω */
    .main .block-container {
        padding-top: 2rem;
        background: linear-gradient(135deg, rgba(110,231,255,0.05), rgba(139,92,246,0.05));
        border-radius: 20px;
        margin-top: 1rem;
    }

    /* –ó–∞–≥–æ–ª–æ–≤–∫–∏ */
    .main-title {
        background: linear-gradient(135deg, #6ee7ff, #8b5cf6);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        font-size: 2.5rem;
        font-weight: 800;
        text-align: center;
        margin-bottom: 1rem;
    }

    .subtitle {
        text-align: center;
        color: #a9b3c7;
        font-size: 1.1rem;
        margin-bottom: 2rem;
    }

    /* –ö–∞—Ä—Ç–æ—á–∫–∏ */
    .feature-card {
        background: rgba(255,255,255,0.08);
        border: 1px solid rgba(255,255,255,0.1);
        border-radius: 16px;
        padding: 1.5rem;
        margin: 1rem 0;
        box-shadow: 0 8px 32px rgba(0,0,0,0.3);
        backdrop-filter: blur(10px);
    }

    .info-card {
        background: linear-gradient(135deg, rgba(110,231,255,0.1), rgba(139,92,246,0.1));
        border: 1px solid rgba(110,231,255,0.2);
        border-radius: 12px;
        padding: 1rem;
        margin: 0.5rem 0;
    }

    .success-card {
        background: linear-gradient(135deg, rgba(52,211,153,0.1), rgba(34,197,94,0.1));
        border: 1px solid rgba(52,211,153,0.3);
        border-radius: 12px;
        padding: 1rem;
        margin: 0.5rem 0;
    }

    /* –ú–µ—Ç—Ä–∏–∫–∏ */
    .metric-container {
        display: flex;
        gap: 1rem;
        margin: 1rem 0;
    }

    .metric-card {
        flex: 1;
        background: rgba(255,255,255,0.06);
        border: 1px solid rgba(255,255,255,0.1);
        border-radius: 12px;
        padding: 1rem;
        text-align: center;
    }

    .metric-value {
        font-size: 1.5rem;
        font-weight: 700;
        color: #6ee7ff;
    }

    .metric-label {
        font-size: 0.9rem;
        color: #a9b3c7;
        margin-top: 0.5rem;
    }

    /* –ö–Ω–æ–ø–∫–∏ */
    .stButton > button {
        background: linear-gradient(135deg, rgba(110,231,255,0.2), rgba(139,92,246,0.2));
        border: 1px solid rgba(110,231,255,0.3);
        border-radius: 12px;
        color: #e9ecf1;
        font-weight: 600;
        padding: 0.5rem 2rem;
        transition: all 0.3s ease;
    }

    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(110,231,255,0.2);
    }

    /* –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä */
    .stProgress > div > div > div > div {
        background: linear-gradient(90deg, #6ee7ff, #8b5cf6);
    }

    /* –í—ã–¥–µ–ª–µ–Ω–∏–µ –∫–æ–¥–∞ */
    .stCode {
        border-radius: 12px;
        border: 1px solid rgba(255,255,255,0.1);
    }

    /* –ò–∫–æ–Ω–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ */
    .status-icon {
        display: inline-block;
        width: 20px;
        height: 20px;
        border-radius: 50%;
        margin-right: 10px;
        vertical-align: middle;
    }

    .status-success { background: #34d399; }
    .status-warning { background: #f59e0b; }
    .status-info { background: #6ee7ff; }

    /* –ê–Ω–∏–º–∞—Ü–∏–∏ */
    @keyframes pulse {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.7; }
    }

    .processing { animation: pulse 2s infinite; }
    </style>
    """, unsafe_allow_html=True)


def show_header():
    st.markdown('<h1 class="main-title">üöÄ OCR 2.0 Banking</h1>', unsafe_allow_html=True)
    st.markdown(
        '<p class="subtitle">–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –ò–ò</p>',
        unsafe_allow_html=True
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.markdown("""
        <div class="metric-card">
            <div class="metric-value">99.2%</div>
            <div class="metric-label">–¢–æ—á–Ω–æ—Å—Ç—å OCR</div>
        </div>
        """, unsafe_allow_html=True)

    with col2:
        st.markdown("""
        <div class="metric-card">
            <div class="metric-value">15+</div>
            <div class="metric-label">–¢–∏–ø–æ–≤ –ø–æ–ª–µ–π</div>
        </div>
        """, unsafe_allow_html=True)

    with col3:
        st.markdown("""
        <div class="metric-card">
            <div class="metric-value">3 —Å–µ–∫</div>
            <div class="metric-label">–°–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏</div>
        </div>
        """, unsafe_allow_html=True)

    with col4:
        st.markdown("""
        <div class="metric-card">
            <div class="metric-value">RU/KZ</div>
            <div class="metric-label">–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —è–∑—ã–∫–æ–≤</div>
        </div>
        """, unsafe_allow_html=True)


def show_features():
    with st.expander("‚ú® –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã", expanded=False):
        col1, col2 = st.columns(2)
        with col1:
            st.markdown("""
            <div class="feature-card">
                <h4>üîç –£–º–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ</h4>
                <p>PaddleOCR + –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞</p>
            </div>

            <div class="feature-card">
                <h4>üìä –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–µ–π</h4>
                <p>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π: —Å—É–º–º—ã, –¥–∞—Ç—ã, —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –ø–æ–¥–ø–∏—Å–∏</p>
            </div>
            """, unsafe_allow_html=True)

        with col2:
            st.markdown("""
            <div class="feature-card">
                <h4>üõ°Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö</h4>
                <p>–ü—Ä–æ–≤–µ—Ä–∫–∞ IBAN, –ë–ò–ö, –ò–ò–ù/–ë–ò–ù, –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Å—É–º–º –∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤</p>
            </div>

            <div class="feature-card">
                <h4>üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞</h4>
                <p>–ú–µ—Ç—Ä–∏–∫–∏ CER/WER, –∞–Ω–∞–ª–∏–∑ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–≤—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏</p>
            </div>
            """, unsafe_allow_html=True)


# ============= –û–°–ù–û–í–ù–û–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï =============

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="OCR2-Banking Pro",
    layout="wide",
    page_icon="üöÄ",
    initial_sidebar_state="collapsed"
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∏–ª–∏
load_css()

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
show_header()

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
show_features()

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state
if "result" not in st.session_state:
    st.session_state.result = None
if "pages" not in st.session_state:
    st.session_state.pages = None
if "processing" not in st.session_state:
    st.session_state.processing = False

# ============= –û–°–ù–û–í–ù–û–ô –ò–ù–¢–ï–†–§–ï–ô–° =============

st.markdown("---")

# –°–µ–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
col1, col2 = st.columns([2, 1])

with col1:
    st.markdown("""
    <div class="info-card">
        <h3>üìé –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞</h3>
        <p>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: PDF, JPG, PNG. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB</p>
    </div>
    """, unsafe_allow_html=True)

    f = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏",
        type=["pdf", "jpg", "jpeg", "png"],
        help="–õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è —Å PDF —Ñ–∞–π–ª–∞–º–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"
    )

with col2:
    st.markdown("""
    <div class="info-card">
        <h3>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
    </div>
    """, unsafe_allow_html=True)

    doc_type = st.selectbox(
        "–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞",
        ["auto", "receipt", "contract", "statement"],
        index=0,
        help="–í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–æ–º–æ–≥–∞–µ—Ç —Å–∏—Å—Ç–µ–º–µ –ª—É—á—à–µ –∏–∑–≤–ª–µ–∫–∞—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø–æ–ª—è"
    )

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    with st.expander("üîß –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
        confidence_threshold = st.slider("–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ OCR", 0.5, 1.0, 0.8, 0.05)
        enable_postprocessing = st.checkbox("–í–∫–ª—é—á–∏—Ç—å –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫—É", value=True)
        extract_tables = st.checkbox("–ò–∑–≤–ª–µ–∫–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã", value=False)

# –ö–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
if f:
    if not st.session_state.processing:
        process_button = st.button("üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", type="primary", use_container_width=True)
    else:
        st.markdown('<div class="processing">‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞...</div>', unsafe_allow_html=True)
        process_button = False
else:
    st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    process_button = False

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
if process_button and f and not st.session_state.processing:
    st.session_state.processing = True

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    tmp = PROJECT_ROOT / "tmp_upload" / f.name
    tmp.parent.mkdir(parents=True, exist_ok=True)
    tmp.write_bytes(f.read())

    hint = None if doc_type == "auto" else doc_type

    # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä —Å —ç—Ç–∞–ø–∞–º–∏
    progress_bar = st.progress(0)
    status_text = st.empty()

    try:
        status_text.text("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞...")
        progress_bar.progress(10)

        status_text.text("üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
        progress_bar.progress(30)

        status_text.text("üîç –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (OCR)...")
        progress_bar.progress(60)

        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        result, pages = run_pipeline(tmp, hint)

        status_text.text("‚öôÔ∏è –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–µ–π...")
        progress_bar.progress(80)

        status_text.text("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
        progress_bar.progress(100)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        st.session_state.result = result
        st.session_state.pages = pages
        st.session_state.processing = False

        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        progress_bar.empty()
        status_text.empty()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
        st.markdown("""
        <div class="success-card">
            <h3>üéâ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</h3>
            <p>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –Ω–∏–∂–µ. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—è –∏ —Å–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.</p>
        </div>
        """, unsafe_allow_html=True)

    except Exception as e:
        st.session_state.processing = False
        progress_bar.empty()
        status_text.empty()
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}")

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
if st.session_state.result and not st.session_state.processing:
    st.markdown("---")
    st.markdown("## üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏")

    # –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    result = st.session_state.result
    fields_count = len(result.get("fields", {}))
    text_length = len(result.get("text", ""))
    line_items_count = len(result.get("lineItems", []))

    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("–ò–∑–≤–ª–µ—á–µ–Ω–æ –ø–æ–ª–µ–π", fields_count, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π")
    with col2:
        st.metric("–°–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞", text_length, help="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")
    with col3:
        st.metric("–°—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö", line_items_count, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö")
    with col4:
        avg_conf = 0.95  # –≠—Ç–æ –º–æ–∂–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å –∏–∑ debug –¥–∞–Ω–Ω—ã—Ö
        st.metric("–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{avg_conf:.1%}", help="–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è OCR")

    # ======= –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã =======
    tab1, tab2, tab3, tab4 = st.tabs(["üìÑ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", "üìã –î–∞–Ω–Ω—ã–µ", "üîç –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä", "‚¨áÔ∏è –≠–∫—Å–ø–æ—Ä—Ç"])

    with tab1:
        st.subheader("–°—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        if st.session_state.pages:
            cols = st.columns(min(3, len(st.session_state.pages)))
            for i, page in enumerate(st.session_state.pages):
                with cols[i % len(cols)]:
                    st.image(page, caption=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {i + 1}", use_column_width=True)
        else:
            st.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã")

    with tab2:
        col1, col2 = st.columns([1, 1])

        with col1:
            st.subheader("üîë –ö–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è")
            fields = result.get("fields", {})
            if fields:
                for key, value in fields.items():
                    st.text(f"{key}: {value}")
            else:
                st.info("–ö–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        with col2:
            st.subheader("üìÑ JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            st.code(
                json.dumps(result, ensure_ascii=False, indent=2),
                language="json"
            )

    with tab3:
        # SPY —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        pages = st.session_state.pages or []
        debug = result.get("debug", {})
        ocr_pages = debug.get("ocr", [])

        if not pages or not ocr_pages:
            st.info("üîç –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        else:
            col1, col2 = st.columns([1, 1])

            with col1:
                page_idx = st.number_input(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É",
                    min_value=1,
                    max_value=len(pages),
                    value=1,
                    help="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ OCR"
                )

                ocr_items = ocr_pages[min(page_idx - 1, len(ocr_pages) - 1)] or []
                if ocr_items:
                    options = [
                        f"{i}: {o['text'][:30]}... (conf={o.get('conf', 0):.2f})"
                        for i, o in enumerate(ocr_items)
                    ]
                    sel = st.selectbox("OCR —ç–ª–µ–º–µ–Ω—Ç", options, index=0)

                    if sel:
                        i = int(sel.split(":", 1)[0])
                        item = ocr_items[i]

                        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ
                        st.markdown("**–î–µ—Ç–∞–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–∞:**")
                        st.text(f"–¢–µ–∫—Å—Ç: {item['text']}")
                        st.text(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {item.get('conf', 0):.3f}")
                        st.text(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {item['bbox']}")

            with col2:
                if ocr_items and sel:
                    try:
                        i = int(sel.split(":", 1)[0])
                        bbox = ocr_items[i]["bbox"]
                        page_img = pages[page_idx - 1]
                        crop = safe_crop(page_img, bbox)
                        if crop is None:
                            st.warning("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π bbox –¥–ª—è –∫—Ä–æ–ø–∞")
                        else:
                            st.markdown("**–§—Ä–∞–≥–º–µ–Ω—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:**")
                            st.image(crop, caption=f"–û–±–ª–∞—Å—Ç—å: {normalize_bbox(bbox)}")

                        st.markdown("**–§—Ä–∞–≥–º–µ–Ω—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:**")
                        st.image(crop, caption=f"–û–±–ª–∞—Å—Ç—å: [{x1},{y1},{x2},{y2}]")
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–µ–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

    with tab4:
        st.subheader("üì• –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

        col1, col2 = st.columns(2)

        with col1:
            # JSON —ç–∫—Å–ø–æ—Ä—Ç
            js = json.dumps(result, ensure_ascii=False, indent=2)
            st.download_button(
                "üìÑ –°–∫–∞—á–∞—Ç—å JSON",
                data=js.encode("utf-8"),
                file_name=f"ocr2_result_{doc_type}.json",
                mime="application/json",
                use_container_width=True
            )

            # –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª–µ–π –∫–∞–∫ CSV
            if result.get("fields"):
                import io, csv

                s = io.StringIO()
                writer = csv.writer(s)
                writer.writerow(["–ü–æ–ª–µ", "–ó–Ω–∞—á–µ–Ω–∏–µ"])
                for k, v in result["fields"].items():
                    writer.writerow([k, v])

                st.download_button(
                    "üìä –°–∫–∞—á–∞—Ç—å –ø–æ–ª—è (CSV)",
                    data=s.getvalue().encode("utf-8"),
                    file_name=f"fields_{doc_type}.csv",
                    mime="text/csv",
                    use_container_width=True
                )

        with col2:
            # –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü
            items = result.get("lineItems", [])
            if items:
                import io, csv

                s = io.StringIO()
                fieldnames = sorted({k for it in items for k in it.keys()})
                w = csv.DictWriter(s, fieldnames=fieldnames)
                w.writeheader()
                for it in items:
                    w.writerow(it)

                st.download_button(
                    "üìã –°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã (CSV)",
                    data=s.getvalue().encode("utf-8"),
                    file_name=f"line_items_{doc_type}.csv",
                    mime="text/csv",
                    use_container_width=True
                )
            else:
                st.info("–¢–∞–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")

    # ======= –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π =======
    with st.expander("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø–æ–ª—è", expanded=False):
        st.write("–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –ø–µ—Ä–µ–¥ —ç–∫—Å–ø–æ—Ä—Ç–æ–º:")

        fields = result.get("fields", {}) or {}
        data = [
            {"key": k, "value": "" if v is None else v}
            for k, v in fields.items()
        ]

        edited = st.data_editor(
            data,
            num_rows="dynamic",
            use_container_width=True,
            key="fields_editor",
            column_config={
                "key": st.column_config.TextColumn("–ü–æ–ª–µ", help="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è"),
                "value": st.column_config.TextColumn("–ó–Ω–∞—á–µ–Ω–∏–µ", help="–ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è"),
            }
        )

        if st.button("üíæ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", type="secondary"):
            new_fields = {}
            for row in edited:
                k = str(row.get("key", "")).strip()
                if k:
                    new_fields[k] = row.get("value", "")
            st.session_state.result["fields"] = new_fields
            st.success("‚úÖ –ü–æ–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
            st.rerun()

elif not st.session_state.processing:
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º placeholder –∫–æ–≥–¥–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    st.markdown("""
    <div class="info-card">
        <h3>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OCR 2.0 Banking</h3>
        <p>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –≤—ã—à–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:</p>
        <ul>
            <li>–†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é</li>
            <li>–ò–∑–≤–ª–µ—á–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è (—Å—É–º–º—ã, –¥–∞—Ç—ã, —Ä–µ–∫–≤–∏–∑–∏—Ç—ã)</li>
            <li>–ü—Ä–æ–≤–µ—Ä–∏—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö</li>
            <li>–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É</li>
        </ul>
    </div>
    """, unsafe_allow_html=True)

