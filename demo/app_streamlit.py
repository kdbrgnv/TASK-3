# demo/app_streamlit.py
import sys, os
from pathlib import Path
from typing import Iterable, Tuple, Optional

# --- –Ω–∞–¥—ë–∂–Ω—ã–π –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É ---
CURR_DIR = Path(__file__).resolve().parent          # .../demo
PROJECT_ROOT = CURR_DIR.parent                      # –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
if str(PROJECT_ROOT) not in sys.path:
    sys.path.append(str(PROJECT_ROOT))

# --- –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç safe_crop –∏–∑ –¥–≤—É—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç ---
try:
    from utils.image_tools import safe_crop
except Exception:
    try:
        from utils.image_tools import safe_crop
    except Exception:
        safe_crop = None  # –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –¥–∞–ª—å—à–µ –≤ –∫–æ–¥–µ

# --- —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã ---
import json
from io import BytesIO
from PIL import Image
import streamlit as st

# --- –Ω–∞—à –ø–∞–π–ø–ª–∞–π–Ω ---
from src.pipeline import run_pipeline


# ============= –°–¢–ò–õ–ò–ó–ê–¶–ò–Ø =============
st.set_page_config(
    page_title="OCR2-Banking Pro",
    layout="wide",
    page_icon="üöÄ",
    initial_sidebar_state="collapsed"
)

def load_css():
    st.markdown("""
    <style>
    :root {
        --primary-color: #6ee7ff;
        --secondary-color: #8b5cf6;
        --bg-dark: #0b1020;
        --bg-light: #0f1630;
        --text-color: #e9ecf1;
        --muted-color: #a9b3c7;
        --success-color: #34d399;
        --warning-color: #f59e0b;
        --danger-color: #ef4444;
    }
    .main .block-container {
        padding-top: 2rem;
        background: linear-gradient(135deg, rgba(110,231,255,0.05), rgba(139,92,246,0.05));
        border-radius: 20px;
        margin-top: 1rem;
    }
    .main-title {
        background: linear-gradient(135deg, #6ee7ff, #8b5cf6);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        font-size: 2.5rem;
        font-weight: 800;
        text-align: center;
        margin-bottom: 1rem;
    }
    .subtitle {
        text-align: center;
        color: #a9b3c7;
        font-size: 1.1rem;
        margin-bottom: 2rem;
    }
    .feature-card {
        background: rgba(255,255,255,0.08);
        border: 1px solid rgba(255,255,255,0.1);
        border-radius: 16px;
        padding: 1.5rem;
        margin: 1rem 0;
        box-shadow: 0 8px 32px rgba(0,0,0,0.3);
        backdrop-filter: blur(10px);
    }
    .info-card {
        background: linear-gradient(135deg, rgba(110,231,255,0.1), rgba(139,92,246,0.1));
        border: 1px solid rgba(110,231,255,0.2);
        border-radius: 12px;
        padding: 1rem;
        margin: 0.5rem 0;
    }
    .success-card {
        background: linear-gradient(135deg, rgba(52,211,153,0.1), rgba(34,197,94,0.1));
        border: 1px solid rgba(52,211,153,0.3);
        border-radius: 12px;
        padding: 1rem;
        margin: 0.5rem 0;
    }
    .metric-card {
        background: rgba(255,255,255,0.06);
        border: 1px solid rgba(255,255,255,0.1);
        border-radius: 12px;
        padding: 1rem;
        text-align: center;
    }
    .processing { animation: pulse 2s infinite; }
    @keyframes pulse { 0%,100%{opacity:1} 50%{opacity:.7}}
    </style>
    """, unsafe_allow_html=True)

def show_header():
    st.markdown('<h1 class="main-title">üöÄ OCR 2.0 Banking</h1>', unsafe_allow_html=True)
    st.markdown('<p class="subtitle">–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –ò–ò</p>', unsafe_allow_html=True)

    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.markdown('<div class="metric-card"><div style="font-size:1.5rem;font-weight:700;color:#6ee7ff">99.2%</div><div style="color:#a9b3c7">–¢–æ—á–Ω–æ—Å—Ç—å OCR</div></div>', unsafe_allow_html=True)
    with col2:
        st.markdown('<div class="metric-card"><div style="font-size:1.5rem;font-weight:700;color:#6ee7ff">15+</div><div style="color:#a9b3c7">–¢–∏–ø–æ–≤ –ø–æ–ª–µ–π</div></div>', unsafe_allow_html=True)
    with col3:
        st.markdown('<div class="metric-card"><div style="font-size:1.5rem;font-weight:700;color:#6ee7ff">3 —Å–µ–∫</div><div style="color:#a9b3c7">–°–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏</div></div>', unsafe_allow_html=True)
    with col4:
        st.markdown('<div class="metric-card"><div style="font-size:1.5rem;font-weight:700;color:#6ee7ff">RU/KZ</div><div style="color:#a9b3c7">–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —è–∑—ã–∫–æ–≤</div></div>', unsafe_allow_html=True)

def show_features():
    with st.expander("‚ú® –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã", expanded=False):
        col1, col2 = st.columns(2)
        with col1:
            st.markdown("""
            <div class="feature-card">
                <h4>üîç –£–º–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ</h4>
                <p>PaddleOCR + ML –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏</p>
            </div>
            <div class="feature-card">
                <h4>üìä –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–µ–π</h4>
                <p>–°—É–º–º–∞, –¥–∞—Ç–∞, —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –ø–æ–¥–ø–∏—Å–∏</p>
            </div>
            """, unsafe_allow_html=True)
        with col2:
            st.markdown("""
            <div class="feature-card">
                <h4>üõ°Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö</h4>
                <p>IBAN, –ë–ò–ö, –ò–ò–ù/–ë–ò–ù, –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Å—É–º–º—ã</p>
            </div>
            <div class="feature-card">
                <h4>üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞</h4>
                <p>–ú–µ—Ç—Ä–∏–∫–∏ CER/WER, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å OCR</p>
            </div>
            """, unsafe_allow_html=True)


# ============= –û–°–ù–û–í–ù–û–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï =============
load_css()
show_header()
show_features()

if "result" not in st.session_state:
    st.session_state.result = None
if "pages" not in st.session_state:
    st.session_state.pages = None
if "processing" not in st.session_state:
    st.session_state.processing = False

st.markdown("---")

col1, col2 = st.columns([2, 1])

with col1:
    st.markdown("""
    <div class="info-card">
        <h3>üìé –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞</h3>
        <p>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: PDF, JPG, PNG. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 200MB</p>
    </div>
    """, unsafe_allow_html=True)

    f = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏",
        type=["pdf", "jpg", "jpeg", "png"],
        help="–õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ ‚Äî —É PDF –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"
    )

with col2:
    st.markdown("""
    <div class="info-card">
        <h3>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
    </div>
    """, unsafe_allow_html=True)

    doc_type = st.selectbox(
        "–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞",
        ["auto", "receipt", "contract", "statement"],
        index=0,
        help="–ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç —Ç–æ—á–Ω–µ–µ –∏–∑–≤–ª–µ–∫–∞—Ç—å –ø–æ–ª—è"
    )

    with st.expander("üîß –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
        confidence_threshold = st.slider("–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ OCR", 0.5, 1.0, 0.8, 0.05)
        preproc_mode = st.selectbox("–ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞", ["soft", "binary"], index=0)  # üëà –≤—Å—Ç–∞–≤–∏—Ç—å –∑–¥–µ—Å—å
        enable_postprocessing = st.checkbox("–í–∫–ª—é—á–∏—Ç—å –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫—É", value=True)
        extract_tables = st.checkbox("–ò–∑–≤–ª–µ–∫–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã", value=False)

if f:
    if not st.session_state.processing:
        process_button = st.button("üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", type="primary", use_container_width=True)
    else:
        st.markdown('<div class="processing">‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞...</div>', unsafe_allow_html=True)
        process_button = False
else:
    st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    process_button = False

if process_button and f and not st.session_state.processing:
    st.session_state.processing = True

    tmp = PROJECT_ROOT / "tmp_upload" / f.name
    tmp.parent.mkdir(parents=True, exist_ok=True)
    tmp.write_bytes(f.read())

    hint = None if doc_type == "auto" else doc_type

    progress_bar = st.progress(0)
    status_text = st.empty()

    try:
        status_text.text("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞...")
        progress_bar.progress(10)

        status_text.text("üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
        progress_bar.progress(30)

        status_text.text("üîç –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (OCR)...")
        progress_bar.progress(60)

        result, pages = run_pipeline(
            tmp,
            hint,
            conf_threshold=confidence_threshold,
            preproc_mode=preproc_mode
        )
        status_text.text("‚öôÔ∏è –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–µ–π...")
        progress_bar.progress(80)

        status_text.text("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
        progress_bar.progress(100)

        st.session_state.result = result or {}
        st.session_state.pages = pages or []
        st.session_state.processing = False

        progress_bar.empty()
        status_text.empty()

        st.markdown("""
        <div class="success-card">
            <h3>üéâ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</h3>
            <p>–°–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∏–∂–µ: –¥–∞–Ω–Ω—ã–µ, —Ä–∞–∑–¥–µ–ª—ã, –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä –∏ —ç–∫—Å–ø–æ—Ä—Ç.</p>
        </div>
        """, unsafe_allow_html=True)

    except Exception as e:
        st.session_state.processing = False
        progress_bar.empty()
        status_text.empty()
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}")

# ======= –†–ï–ó–£–õ–¨–¢–ê–¢–´ =======
if st.session_state.result and not st.session_state.processing:
    st.markdown("---")
    st.markdown("## üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏")

    result = st.session_state.result or {}
    pages = st.session_state.pages or []

    fields = result.get("fields") or {}
    text = result.get("text") or ""
    line_items = result.get("lineItems") or []
    sections = result.get("sections") or []

    fields_count = len(fields)
    text_length = len(text)
    line_items_count = len(line_items)
    sections_count = len(sections)  # üëà –¥–æ–±–∞–≤–ª—è–µ–º

    col1m, col2m, col3m, col4m, col5m = st.columns(5)  # üëà —Ç–µ–ø–µ—Ä—å 5 –∫–æ–ª–æ–Ω–æ–∫
    with col1m:
        st.metric("–ò–∑–≤–ª–µ—á–µ–Ω–æ –ø–æ–ª–µ–π", fields_count)
    with col2m:
        st.metric("–°–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞", text_length)
    with col3m:
        st.metric("–°—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö", line_items_count)
    with col4m:
        st.metric("–†–∞–∑–¥–µ–ª–æ–≤", sections_count)  # üëà –Ω–æ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞
    with col5m:
        avg_conf = 0.95
        st.metric("–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{avg_conf:.1%}")

    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "üìÑ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä",
        "üìã –î–∞–Ω–Ω—ã–µ",
        "üìö –†–∞–∑–¥–µ–ª—ã",  # üëà –Ω–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞
        "üîç –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä",
        "‚¨áÔ∏è –≠–∫—Å–ø–æ—Ä—Ç"
    ])

    # -------- TAB 1: –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä --------
    with tab1:
        st.subheader("–°—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        if pages:
            cols = st.columns(min(3, max(1, len(pages))))
            for i, page in enumerate(pages):
                with cols[i % len(cols)]:
                    st.image(page, caption=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {i + 1}", use_column_width=True)
        else:
            st.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã")

    # -------- TAB 2: –î–∞–Ω–Ω—ã–µ (–ø–æ–ª—è + —Ä–∞–∑–¥–µ–ª—ã + JSON) --------
    with tab2:
        c1, c2 = st.columns([1, 1])

        with c1:
            st.subheader("üîë –ö–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è")
            if fields:
                for key, value in fields.items():
                    st.text(f"{key}: {value}")
            else:
                st.info("–ö–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

            st.subheader("üìö –†–∞–∑–¥–µ–ª—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞")
            if sections:
                for s in sections:
                    title = ((s.get('num') + " ") if s.get('num') else "") + (s.get("title") or "–†–∞–∑–¥–µ–ª")
                    with st.expander(title, expanded=False):
                        st.markdown(
                            f"<div style='color:#a9b3c7;font-size:12px'>–°—Ç—Ä–∞–Ω–∏—Ü—ã: {s.get('page_from','?')}‚Äì{s.get('page_to','?')} ¬∑ –£—Ä–æ–≤–µ–Ω—å: {s.get('level',1)}</div>",
                            unsafe_allow_html=True
                        )
                        st.text(s.get("content", ""))
            else:
                st.info("–†–∞–∑–¥–µ–ª—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –Ω–µ—Ç —è–≤–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.")

        with c2:
            st.subheader("üìÑ JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            st.code(json.dumps(result, ensure_ascii=False, indent=2), language="json")

    with tab3:
        st.subheader("üìö –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        if sections:
            for s in sections:
                title = ((s.get('num') + " ") if s.get('num') else "") + (s.get("title") or "–†–∞–∑–¥–µ–ª")
                with st.expander(title, expanded=False):
                    st.markdown(
                        f"<div style='color:#a9b3c7;font-size:12px'>–°—Ç—Ä–∞–Ω–∏—Ü—ã: {s.get('page_from', '?')}‚Äì{s.get('page_to', '?')} ¬∑ "
                        f"–£—Ä–æ–≤–µ–Ω—å: {s.get('level', 1)}</div>",
                        unsafe_allow_html=True
                    )
                    st.text(s.get("content", ""))
        else:
            st.info("–†–∞–∑–¥–µ–ª—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
    # -------- TAB 3: –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä --------
    with tab4:
        debug = result.get("debug") or {}
        ocr_pages = debug.get("ocr") or []

        if not pages or not ocr_pages:
            st.info("üîç –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        else:
            lc, rc = st.columns([1, 1])

            sel = None
            ocr_items = []

            with lc:
                page_idx = st.number_input(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É",
                    min_value=1,
                    max_value=len(pages),
                    value=1,
                    help="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ OCR"
                )
                page_pos = min(max(page_idx - 1, 0), len(ocr_pages) - 1)
                ocr_items = (ocr_pages[page_pos] or []) if ocr_pages else []

                if ocr_items:
                    options = [
                        f"{i}: {str(o.get('text', ''))[:30]}... (conf={float(o.get('conf', o.get('score', 0.0))):.2f})"
                        for i, o in enumerate(ocr_items)
                    ]
                    sel_opt = st.selectbox("OCR —ç–ª–µ–º–µ–Ω—Ç", options, index=0)
                    if sel_opt:
                        sel = int(sel_opt.split(":", 1)[0])

                    if sel is not None:
                        item = ocr_items[sel]
                        st.markdown("**–î–µ—Ç–∞–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–∞:**")
                        st.text(f"–¢–µ–∫—Å—Ç: {item.get('text', '')}")
                        st.text(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {float(item.get('conf', item.get('score', 0.0))):.3f}")
                        st.text(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {item.get('bbox')}")

            with rc:
                if ocr_items and sel is not None:
                    try:
                        item = ocr_items[sel]
                        bbox = item.get("bbox")
                        page_img = pages[page_pos]
                        if safe_crop is None:
                            st.warning("safe_crop –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å –∏–º–ø–æ—Ä—Ç utils.image_tools –∏–ª–∏ src.utils.image_tools.")
                        else:
                            crop = safe_crop(page_img, bbox) if bbox else None
                            if crop is None:
                                st.warning("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π bbox –¥–ª—è –∫—Ä–æ–ø–∞")
                            else:
                                st.markdown("**–§—Ä–∞–≥–º–µ–Ω—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:**")
                                st.image(crop, caption=f"bbox: {bbox}")
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–µ–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

    # -------- TAB 4: –≠–∫—Å–ø–æ—Ä—Ç --------
    with tab5:
        st.subheader("üì• –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

        ec1, ec2 = st.columns(2)
        with ec1:
            js = json.dumps(result, ensure_ascii=False, indent=2)
            st.download_button(
                "üìÑ –°–∫–∞—á–∞—Ç—å JSON",
                data=js.encode("utf-8"),
                file_name=f"ocr2_result_{result.get('docType','doc')}.json",
                mime="application/json",
                use_container_width=True
            )

            if fields:
                import io, csv
                s = io.StringIO()
                writer = csv.writer(s)
                writer.writerow(["–ü–æ–ª–µ", "–ó–Ω–∞—á–µ–Ω–∏–µ"])
                for k, v in fields.items():
                    writer.writerow([k, v])
                st.download_button(
                    "üìä –°–∫–∞—á–∞—Ç—å –ø–æ–ª—è (CSV)",
                    data=s.getvalue().encode("utf-8"),
                    file_name=f"fields_{result.get('docType','doc')}.csv",
                    mime="text/csv",
                    use_container_width=True
                )

        with ec2:
            items = line_items
            if items:
                import io, csv
                s = io.StringIO()
                fieldnames = sorted({k for it in items for k in it.keys()})
                w = csv.DictWriter(s, fieldnames=fieldnames)
                w.writeheader()
                for it in items:
                    w.writerow(it)
                st.download_button(
                    "üìã –°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã (CSV)",
                    data=s.getvalue().encode("utf-8"),
                    file_name=f"line_items_{result.get('docType','doc')}.csv",
                    mime="text/csv",
                    use_container_width=True
                )
            else:
                st.info("–¢–∞–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")

    # ======= –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π =======
    with st.expander("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø–æ–ª—è", expanded=False):
        st.write("–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –ø–µ—Ä–µ–¥ —ç–∫—Å–ø–æ—Ä—Ç–æ–º:")
        data = [{"key": k, "value": "" if v is None else v} for k, v in (fields.items() if fields else [])]
        edited = st.data_editor(
            data,
            num_rows="dynamic",
            use_container_width=True,
            key="fields_editor",
            column_config={
                "key": st.column_config.TextColumn("–ü–æ–ª–µ", help="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è"),
                "value": st.column_config.TextColumn("–ó–Ω–∞—á–µ–Ω–∏–µ", help="–ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è"),
            }
        )
        if st.button("üíæ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", type="secondary"):
            new_fields = {}
            for row in edited:
                k = str(row.get("key", "")).strip()
                if k:
                    new_fields[k] = row.get("value", "")
            st.session_state.result = {**result, "fields": new_fields}
            st.success("‚úÖ –ü–æ–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
            st.rerun()

elif not st.session_state.processing:
    # Placeholder ‚Äî –∫–æ–≥–¥–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    st.markdown("""
    <div class="info-card">
        <h3>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OCR 2.0 Banking</h3>
        <p>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –≤—ã—à–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:</p>
        <ul>
            <li>–†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é</li>
            <li>–ò–∑–≤–ª–µ—á–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è (—Å—É–º–º—ã, –¥–∞—Ç—ã, —Ä–µ–∫–≤–∏–∑–∏—Ç—ã)</li>
            <li>–°–æ–±–µ—Ä—ë—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞: ¬´–ó–∞–≥–æ–ª–æ–≤–æ–∫ ‚Üí —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ¬ª</li>
            <li>–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É</li>
        </ul>
    </div>
    """, unsafe_allow_html=True)
